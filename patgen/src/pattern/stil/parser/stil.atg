#include "Stil.h"
#include <vector>
#include <string>
#include <sstream>
#include <iostream>

using namespace Stil;

COMPILER Stil

/*
    std::string toString(wchar_t* wstr) {
        std::wstringstream wsstr;
        wsstr << wstr;
        std::wstring wresult = wsstr.str();
        std::string  result( wresult.begin(), wresult.end());
        result.assign( wresult.begin(), wresult.end());

        std::wcout << wresult << std::endl;

        return result;
    }
*/

    Stil::SymbolTable            table;
    Stil::Signals                signals;
    Stil::Collection<Stil::Spec> specs;
    Stil::SignalGroups* pSignalGroups; // TODO : Replace this with a Collection object

    std::map<std::string, std::string> symTab;
    int level;

CHARACTERS
    letter      = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
    underscore  = "_".
    digit       = "0123456789".
    dot         = ".".
    cr          = '\r'.
    lf          = '\n'.
    tab         = '\t'.
    semicolon   = ';'.
    stringChar  = ANY - "\"" - '\\' - cr -lf.
    stringChar2 = ANY - "'" - '\\' - cr -lf.
TOKENS

    integer     = digit {digit}.
    decimal     = digit {digit} dot {digit}.
    semi        = semicolon.
    range       = dot dot.
    IDENTIFIER  = (letter | underscore) {letter | underscore | digit}.
    TODO        = "<(*TODO*)>".
    string      = "\"" {stringChar} "\"".
    expr_string = "'" {stringChar2 | lf} "'".

    ForceDown   = "ForceDown".
    ForceUp     = "ForceUp".
    Unknown     = "Unknown".
                
    lbracket    = '['.
    rbracket    = ']'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab


PRODUCTIONS

    Stil                  = stil_version {stil_block}.
    stil_version          = "STIL" decimal semi.
    stil_block            = signals_block | signalgroups_block | timing_block | spec_block | selector_block | TODO.
    signals_block         = "Signals" '{' signals_list '}'.
    signals_list          = signals_item {signals_item}.
    signals_item          = signal_name (. Stil::Signal signal(t->val); .)
                            signal_type (. signal.setSignalType(t->val); .)
                            (semi | ('{' ("ScanIn" | "ScanOut") semi '}')) (. signals.addSignal(signal); symTab[signal.getName()] = "Signal"; .).
    signal_name           = identifier [ lbracket integer rbracket ].
    signal_type           = "InOut" | "Out" | "In" | "Supply" | "Pseudo".
    signalgroups_block    = "SignalGroups" (. SignalGroups signalGroups; .) '{' groups_list<signalGroups> '}' (. cout << signalGroups.toStil() << endl; .) .
    groups_list<SignalGroups &signalGroups>           = groups_item<signalGroups> {groups_item<signalGroups>}.

    groups_item<SignalGroups &signalGroups>
                          = identifier (. string groupName = t->val;  .)
                            '=' sigref_expr (. string expr = t->val; .)  semi (. signalGroups.add( groupName, expr); .).

    sigref_expr           = signal_name_array_opt | expr_string.
    signal_name_array_opt = signal_name | (identifier lbracket integer range integer  rbracket).
    timing_block          = "Timing" identifier '{' timing_items '}'.
    timing_items          = timing_item {timing_item}.
    timing_item           = waveform_table.
    waveform_table        = "WaveformTable" identifier '{' waveform_table_item {waveform_table_item} '}'.
    waveform_table_item   = period_item | waveforms_block | inherit_item.
    period_item           = "Period" expr_string semi.
    inherit_item          = "InheritWaveformTable" identifier semi.
    waveforms_block       = "Waveforms" '{' waveforms_item {waveforms_item} '}'.
    waveforms_item        = sigref_expr '{' waveform_item {waveform_item} '}'.
    waveform_item         = wfcs '{' wfcs_def {wfcs_def} '}'.
    wfcs_def              = expr_string events semi.
    events                = event {('/' event)}.
    event                 = identifier | ForceDown | ForceUp | '?' | Unknown.
    wfcs                  = wfc {wfc}.
    wfc                   = integer | identifier | '#' | '%'.
    spec_block            = "Spec" identifier (. Spec spec; spec.setName(t->val); .)
                            '{' category_block {category_block} '}'.
    category_block        = "Category" identifier (. cout << "Category " << t->val << endl; .)
                            '{' category_item {category_item} '}'.
//    category_item         = category_var | category_spec.
//    category_var          = identifier (. cout << t->val << endl; .) '=' (expr_string | string) semi.
//    category_spec         = identifier (. cout << t->val << endl; .) '{' min_spec typ_spec max_spec '}'.
    category_item         = identifier (. SpecItem specItem(t->val); cout << t->val << endl; .) 
                              ( 
                                '=' 
                                  (expr_string | string) (. specItem.expr = t->val; .) semi
                                  |
                                  '{' min_spec typ_spec max_spec '}'
                              ).
    min_spec              = "Min" expr_string semi.
    typ_spec              = "Typ" expr_string semi.
    max_spec              = "Max" expr_string semi.
    selector_block        = "Selector" identifier '{' selector_item {selector_item} '}'.
    selector_item         = identifier ("Min" | "Typ" | "Max") semi.
    identifier            = IDENTIFIER | string.

END Stil.

